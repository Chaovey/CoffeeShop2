// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CoffeeShop2.Migrations
{
    [DbContext(typeof(SqlContext))]
    partial class SqlContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoffeeShop2.Models.Customers.Customer", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<int>("Order_history")
                        .HasColumnType("int")
                        .HasColumnName("Order_history");

                    b.Property<string>("Phone")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Phone");

                    b.HasKey("Id");

                    b.ToTable("tbcustomer", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.Items.Item", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<string>("itemId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("itemId");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("size");

                    b.HasKey("Id");

                    b.ToTable("tbitem", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.Menus.Menu", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("Name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Price");

                    b.Property<string>("menuId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("menuId");

                    b.HasKey("Id");

                    b.ToTable("tbmenu", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.OrderItems.OrderItem", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("itemId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("orderItemId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("orderItemId");

                    b.Property<int>("quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.HasKey("Id");

                    b.HasIndex("itemId");

                    b.HasIndex("orderId");

                    b.ToTable("tborderitem", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.Orders.Order", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("MenuId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("Price");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("orderId");

                    b.Property<string>("orderStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("orderStatus");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("MenuId");

                    b.ToTable("tborder", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.Payments.Payment", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(36)
                        .HasColumnType("varchar")
                        .HasColumnName("Id");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<string>("orderId")
                        .IsRequired()
                        .HasColumnType("varchar(36)");

                    b.Property<decimal>("paymentAmount")
                        .HasColumnType("decimal(18,3)")
                        .HasColumnName("paymentAmount");

                    b.Property<DateTime?>("paymentDate")
                        .IsRequired()
                        .HasColumnType("datetime")
                        .HasColumnName("paymentDate");

                    b.Property<string>("paymentId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar")
                        .HasColumnName("paymentId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.HasIndex("orderId");

                    b.ToTable("tbpayment", (string)null);
                });

            modelBuilder.Entity("CoffeeShop2.Models.OrderItems.OrderItem", b =>
                {
                    b.HasOne("CoffeeShop2.Models.Items.Item", "item")
                        .WithMany("orderitem")
                        .HasForeignKey("itemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoffeeShop2.Models.Orders.Order", "order")
                        .WithMany("orderItem")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("item");

                    b.Navigation("order");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Orders.Order", b =>
                {
                    b.HasOne("CoffeeShop2.Models.Customers.Customer", "customer")
                        .WithMany("order")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoffeeShop2.Models.Menus.Menu", "menus")
                        .WithMany("order")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("customer");

                    b.Navigation("menus");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Payments.Payment", b =>
                {
                    b.HasOne("CoffeeShop2.Models.Customers.Customer", "customers")
                        .WithOne("payment")
                        .HasForeignKey("CoffeeShop2.Models.Payments.Payment", "CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CoffeeShop2.Models.Orders.Order", "orders")
                        .WithMany("payment")
                        .HasForeignKey("orderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("customers");

                    b.Navigation("orders");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Customers.Customer", b =>
                {
                    b.Navigation("order");

                    b.Navigation("payment");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Items.Item", b =>
                {
                    b.Navigation("orderitem");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Menus.Menu", b =>
                {
                    b.Navigation("order");
                });

            modelBuilder.Entity("CoffeeShop2.Models.Orders.Order", b =>
                {
                    b.Navigation("orderItem");

                    b.Navigation("payment");
                });
#pragma warning restore 612, 618
        }
    }
}
